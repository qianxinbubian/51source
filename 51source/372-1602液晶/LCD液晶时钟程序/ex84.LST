C51 COMPILER V8.02   EX84                                                                  07/23/2009 11:16:04 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE EX84
OBJECT MODULE PLACED IN ex84.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ex84.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //液晶时钟设计
   2          #include<reg52.h>    //包含单片机寄存器的头文件
   3          #include<stdlib.h>   //包含随机函数rand()的定义文件
   4          #include<intrins.h>  //包含_nop_()函数定义的头文件
   5          sbit RS=P2^0;    //寄存器选择位，将RS位定义为P2.0引脚
   6          sbit RW=P2^1;    //读写选择位，将RW位定义为P2.1引脚
   7          sbit E=P2^2;     //使能信号位，将E位定义为P2.2引脚
   8          sbit BF=P0^7;    //忙碌标志位，，将BF位定义为P0.7引脚
   9          unsigned char code digit[ ]={"0123456789"}; //定义字符数组显示数字
  10          unsigned char code string[ ]={"Beijing Time"}; //定义字符数组显示提示信息
  11          unsigned char count;   //定义变量统计中断累计次数
  12          unsigned char s,m,h;   //定义变量储存秒、分钟和小时
  13          /*****************************************************
  14          函数功能：延时1ms
  15          (3j+2)*i=(3×33+2)×10=1010(微秒)，可以认为是1毫秒
  16          ***************************************************/
  17          void delay1ms()
  18          {
  19   1         unsigned char i,j;   
  20   1               for(i=0;i<10;i++)
  21   1                for(j=0;j<33;j++)
  22   1                 ;             
  23   1       }
  24           /*****************************************************
  25          函数功能：延时若干毫秒
  26          入口参数：n
  27          ***************************************************/
  28           void delay(unsigned char n)
  29           {
  30   1         unsigned char i;
  31   1              for(i=0;i<n;i++)
  32   1                 delay1ms();
  33   1       }
  34          /*****************************************************
  35          函数功能：判断液晶模块的忙碌状态
  36          返回值：result。result=1，忙碌;result=0，不忙
  37          ***************************************************/
  38           unsigned char BusyTest(void)
  39            {
  40   1          bit result;
  41   1              RS=0;       //根据规定，RS为低电平，RW为高电平时，可以读状态
  42   1          RW=1;
  43   1          E=1;        //E=1，才允许读写
  44   1          _nop_();   //空操作
  45   1          _nop_();
  46   1          _nop_(); 
  47   1          _nop_();   //空操作四个机器周期，给硬件反应时间     
  48   1          result=BF;  //将忙碌标志电平赋给result
  49   1         E=0;         //将E恢复低电平
  50   1         return result;
  51   1        }
  52          /*****************************************************
  53          函数功能：将模式设置指令或显示地址写入液晶模块
  54          入口参数：dictate
  55          ***************************************************/
C51 COMPILER V8.02   EX84                                                                  07/23/2009 11:16:04 PAGE 2   

  56          void WriteInstruction (unsigned char dictate)
  57          {   
  58   1          while(BusyTest()==1); //如果忙就等待
  59   1               RS=0;                  //根据规定，RS和R/W同时为低电平时，可以写入指令
  60   1               RW=0;   
  61   1               E=0;                   //E置低电平(根据表8-6，写指令时，E为高脉冲，
  62   1                                // 就是让E从0到1发生正跳变，所以应先置"0"
  63   1               _nop_();
  64   1               _nop_();             //空操作两个机器周期，给硬件反应时间
  65   1               P0=dictate;            //将数据送入P0口，即写入指令或地址
  66   1               _nop_();
  67   1               _nop_();
  68   1               _nop_();
  69   1               _nop_();               //空操作四个机器周期，给硬件反应时间
  70   1               E=1;                   //E置高电平
  71   1               _nop_();
  72   1               _nop_();
  73   1               _nop_();
  74   1               _nop_();               //空操作四个机器周期，给硬件反应时间
  75   1                E=0;                  //当E由高电平跳变成低电平时，液晶模块开始执行命令
  76   1       }
  77          /*****************************************************
  78          函数功能：指定字符显示的实际地址
  79          入口参数：x
  80          ***************************************************/
  81           void WriteAddress(unsigned char x)
  82           {
  83   1           WriteInstruction(x|0x80); //显示位置的确定方法规定为"80H+地址码x"
  84   1       }
  85          /*****************************************************
  86          函数功能：将数据(字符的标准ASCII码)写入液晶模块
  87          入口参数：y(为字符常量)
  88          ***************************************************/
  89           void WriteData(unsigned char y)
  90           {
  91   1          while(BusyTest()==1);  
  92   1                RS=1;           //RS为高电平，RW为低电平时，可以写入数据
  93   1                RW=0;
  94   1                E=0;            //E置低电平(根据表8-6，写指令时，E为高脉冲，
  95   1                             // 就是让E从0到1发生正跳变，所以应先置"0"
  96   1                P0=y;           //将数据送入P0口，即将数据写入液晶模块
  97   1                _nop_();
  98   1                _nop_();
  99   1                _nop_();
 100   1           _nop_();       //空操作四个机器周期，给硬件反应时间
 101   1                E=1;          //E置高电平
 102   1                _nop_();
 103   1                _nop_();
 104   1                _nop_();
 105   1               _nop_();        //空操作四个机器周期，给硬件反应时间
 106   1               E=0;            //当E由高电平跳变成低电平时，液晶模块开始执行命令
 107   1       }
 108          /*****************************************************
 109          函数功能：对LCD的显示模式进行初始化设置
 110          ***************************************************/
 111          void LcdInitiate(void)
 112          {
 113   1         delay(15);             //延时15ms，首次写指令时应给LCD一段较长的反应时间
 114   1         WriteInstruction(0x38);  //显示模式设置：16×2显示，5×7点阵，8位数据接口
 115   1              delay(5);               //延时5ms　，给硬件一点反应时间
 116   1         WriteInstruction(0x38);
 117   1              delay(5);
C51 COMPILER V8.02   EX84                                                                  07/23/2009 11:16:04 PAGE 3   

 118   1              WriteInstruction(0x38); //连续三次，确保初始化成功
 119   1              delay(5);
 120   1              WriteInstruction(0x0c);  //显示模式设置：显示开，无光标，光标不闪烁
 121   1              delay(5);
 122   1              WriteInstruction(0x06);  //显示模式设置：光标右移，字符不移
 123   1              delay(5);
 124   1              WriteInstruction(0x01);  //清屏幕指令，将以前的显示内容清除
 125   1              delay(5);
 126   1      
 127   1       }
 128           /******************************************************************************
 129           函数功能：显示小时                          
 130          ******************************************************************************/
 131          void DisplayHour()
 132          {
 133   1         unsigned char i,j;
 134   1              i=h/10;                //取整运算，求得十位数字
 135   1              j=h%10;                //取余运算，求得各位数字
 136   1         WriteAddress(0x44);   //写显示地址，将十位数字显示在第2行第5列
 137   1              WriteData(digit[i]);  //将十位数字的字符常量写入LCD
 138   1              WriteData(digit[j]);  //将个位数字的字符常量写入LCD
 139   1           
 140   1       }
 141          /******************************************************************************
 142           函数功能：显示分钟                          
 143           ******************************************************************************/
 144          void DisplayMinute()
 145          {
 146   1        unsigned char i,j;
 147   1         i=m/10;                //取整运算，求得十位数字
 148   1              j=m%10;                //取余运算，求得各位数字
 149   1         WriteAddress(0x47);   //写显示地址，将十位数字显示在第2行第8列
 150   1              WriteData(digit[i]);  //将十位数字的字符常量写入LCD
 151   1              WriteData(digit[j]);  //将个位数字的字符常量写入LCD
 152   1           
 153   1       }
 154           /******************************************************************************
 155           函数功能：显示秒                        
 156            ******************************************************************************/
 157          void DisplaySecond()
 158          {
 159   1         unsigned char i,j;
 160   1              i=s/10;                //取整运算，求得十位数字
 161   1              j=s%10;                //取余运算，求得各位数字
 162   1         WriteAddress(0x4a);   //写显示地址，将十位数字显示在第2行第11列
 163   1              WriteData(digit[i]);  //将十位数字的字符常量写入LCD
 164   1              WriteData(digit[j]);  //将个位数字的字符常量写入LCD
 165   1       }
 166          
 167          /*********************************************************************
 168                         main function
 169          ***********************************************************************/
 170           void main(void)
 171           {
 172   1        unsigned char i;
 173   1          LcdInitiate();  //调用LCD初始化函数
 174   1      
 175   1         TMOD=0x01;                //使用定时器T0的模式1
 176   1              TH0=(65536-46083)/256;    //定时器T0的高8位设置初值
 177   1              TL0=(65536-46083)%256;    //定时器T0的低8位设置初值
 178   1              EA=1;                     //开总中断
 179   1              ET0=1;                    //定时器T0中断允许
C51 COMPILER V8.02   EX84                                                                  07/23/2009 11:16:04 PAGE 4   

 180   1              TR0=1;                    //启动定时器T0
 181   1      
 182   1              count=0;              //中断次数初始化为0
 183   1              s=0;                  //秒初始化为0
 184   1              m=0;                  //分钟初始化为0
 185   1              h=0;                  //小时初始化为0
 186   1      
 187   1         WriteAddress(0x03);   //写地址，从第1行第4列开始显示
 188   1               i=0;              //从字符数组的第1个元素开始显示
 189   1               while(string[i]!='\0')   //只要没有显示到字符串的结束标志'\0'，就继续
 190   1               {
 191   2                       WriteData(string[i]); //将第i个字符数组元素写入LCD
 192   2                       i++;                 //指向下一个数组元素
 193   2               }
 194   1              WriteAddress(0x46);     //写地址，将第二个分号显示在第2行第7列
 195   1              WriteData(':');         //将分号的字符常量写入LCD
 196   1              WriteAddress(0x49);     //写地址，将第二个分号显示在第2行第10列
 197   1              WriteData(':');         //将分号的字符常量写入LCD  
 198   1          while(1)            //无限循环
 199   1            {
 200   2                      DisplayHour();      //显示小时
 201   2                               delay(5);         //给硬件一点反应时间
 202   2                              DisplayMinute();   //显示分钟
 203   2                               delay(5);         //给硬件一点反应时间
 204   2                              DisplaySecond();   //显示秒     
 205   2                  delay(5);       //给硬件一点反应时间
 206   2                 }
 207   1      }
 208          /*******************************************************
 209          函数功能：定时器T0的中断服务函数
 210          ********************************************************/
 211           void Time0(void ) interrupt 1 using 1 //定时器T0的中断编号为1，使用第1组工作寄存器
 212            {
 213   1           count++;  //每产生1次中断，中断累计次数加1
 214   1                       if(count==20)  //如果中断次数计满20次
 215   1                          {
 216   2                    count=0;  //中断累计次数清0
 217   2                              s++;      //秒加1                                
 218   2                              }
 219   1                        if(s==60)   //如果计满60秒
 220   1                               {
 221   2                                s=0;     //秒清0
 222   2                                m++;     //分钟加1
 223   2                          }
 224   1                      if(m==60)    //如果计满60分
 225   1                         {
 226   2                                 m=0;   //分钟清0 
 227   2                                 h++;    //小时加1
 228   2                          }
 229   1                   if(h==24)  //如果计满24小时
 230   1                         {
 231   2                                 h=0;   //小时清0
 232   2                         }
 233   1                 TH0=(65536-46083)/256;   //定时器T0高8位重新赋初值
 234   1                      TL0=(65536-46083)%256;   //定时器T0低8位重新赋初值              
 235   1        }  
 236          
 237          
 238                       


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V8.02   EX84                                                                  07/23/2009 11:16:04 PAGE 5   

   CODE SIZE        =    411    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
